3a.
#include <WiFi.h>
const char* ssid = "Your_SSID";
const char* password = "Your_Password";
WiFiServer server(80);
void setup()
{
 Serial.begin(115200);
 pinMode(2, OUTPUT); // set the LED pin mode
 delay(10);
 // We start by connecting to a WiFi network
 Serial.println();
 Serial.println();
 Serial.print("Connecting to ");
 Serial.println(ssid);
 WiFi.begin(ssid, password);
 while (WiFi.status() != WL_CONNECTED) {
 delay(500);
 Serial.print(".");
 }
 Serial.println("");
 Serial.println("WiFi connected.");
 Serial.println("IP address: ");
 Serial.println(WiFi.localIP());

 server.begin();
}
int value = 0;
void loop(){
WiFiClient client = server.available(); // listen for incoming clients
 if (client) { // if you get a client,
 Serial.println("New Client."); // print a message out the serial port
 String currentLine = ""; // make a String to hold incoming data from the client
 while (client.connected()) { // loop while the client's connected
 if (client.available()) { // if there's bytes to read from the client,
 char c = client.read(); // read a byte, then
 Serial.write(c); // print it out the serial monitor
 if (c == '\n') { // if the byte is a newline character
 // if the current line is blank, you got two newline characters in a row.
 // that's the end of the client HTTP request, so send a response:
if (currentLine.length() == 0) {
 // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
 // and a content-type so the client knows what's coming, then a blank line:
 client.println("HTTP/1.1 200 OK");
 client.println("Content-type:text/html");
 client.println();
 // the content of the HTTP response follows the header:
 client.print("Click <a href=\"/H\">here</a> to turn the LED on pin 2 on.<br>");
 client.print("Click <a href=\"/L\">here</a> to turn the LED on pin 2 off.<br>");
 // The HTTP response ends with another blank line:
 client.println();
 // break out of the while loop:
 break;
 } else { // if you got a newline, then clear currentLine:
 currentLine = "";
 }
 } else if (c != '\r') { // if you got anything else but a carriage return character,
 currentLine += c; // add it to the end of the currentLine
 }
 // Check to see if the client request was "GET /H" or "GET /L":
 if (currentLine.endsWith("GET /H")) {
 digitalWrite(2, HIGH); // GET /H turns the LED on
 }
 if (currentLine.endsWith("GET /L")) {
 digitalWrite(2, LOW); // GET /L turns the LED off
 }
 }
 }
 // close the connection:
 client.stop();
 Serial.println("Client Disconnected.");
 }
}




3b.
#include <WiFi.h>
#include <WebServer.h>
#include "DHT.h"
// Uncomment one of the lines below for whatever DHT sensor type you're using!
#define DHTTYPE DHT11 // DHT 11
//#define DHTTYPE DHT21 // DHT 21 (AM2301)
//#define DHTTYPE DHT22 // DHT 22 (AM2302), AM2321
/*Put your SSID & Password*/
const char* ssid = " REPLACE_WITH_YOUR_SSID "; // Enter SSID here
const char* password = " REPLACE_WITH_YOUR_PASSWORD"; //Enter Password here
WebServer server(80);
// DHT Sensor
uint8_t DHTPin = 4;

// Initialize DHT sensor.
DHT dht(DHTPin, DHTTYPE);
float Temperature;
float Humidity;
void setup() {
 Serial.begin(115200);
 delay(100);

 pinMode(DHTPin, INPUT);
 dht.begin();
 Serial.println("Connecting to ");
 Serial.println(ssid);
 //connect to your local wi-fi network
 WiFi.begin(ssid, password);
 //check wi-fi is connected to wi-fi network
 while (WiFi.status() != WL_CONNECTED) {
 delay(1000);
 Serial.print(".");
 }
 Serial.println("");
 Serial.println("WiFi connected..!");
 Serial.print("Got IP: "); Serial.println(WiFi.localIP());
 server.on("/", handle_OnConnect);
 server.onNotFound(handle_NotFound);
 server.begin();
 Serial.println("HTTP server started");
}
void loop() {
server.handleClient();

}
void handle_OnConnect() {
Temperature = dht.readTemperature(); // Gets the values of the temperature
 Humidity = dht.readHumidity(); // Gets the values of the humidity
 server.send(200, "text/html", SendHTML(Temperature,Humidity));
}
void handle_NotFound(){
 server.send(404, "text/plain", "Not found");
}
String SendHTML(float Temperaturestat,float Humiditystat){
 String ptr = "<!DOCTYPE html> <html>\n";
 ptr +="<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0,
user-scalable=no\">\n";
 ptr +="<title>ESP32 Weather Report</title>\n";
 ptr +="<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; textalign: center;}\n";
 ptr +="body{margin-top: 50px;} h1 {color: #444444;margin: 50px auto 30px;}\n";
 ptr +="p {font-size: 24px;color: #444444;margin-bottom: 10px;}\n";
 ptr +="</style>\n";
 ptr +="</head>\n";
 ptr +="<body>\n";
 ptr +="<div id=\"webpage\">\n";
 ptr +="<h1>ESP32 Weather Report</h1>\n";

 ptr +="<p>Temperature: ";
 ptr +=(int)Temperaturestat;
 ptr +="\xC2\xB0 C</p>";
 ptr +="<p>Humidity: ";
 ptr +=(int)Humiditystat;
 ptr +="%</p>";

 ptr +="</div>\n";
 ptr +="</body>\n";
 ptr +="</html>\n";
return ptr;
}
